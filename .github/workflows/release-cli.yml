name: Release CLI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    paths:
      - 'apps/cli/**'
      - 'packages/**'

  pull_request:
    branches:
      - main
    paths:
      - 'apps/cli/**'
      - 'packages/**'

  workflow_dispatch:

jobs:
  validate-version:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version matches tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            # Extract version from tag (remove 'v' prefix if present)
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION="${TAG_VERSION#v}"
            
            # Extract version from package.json
            PACKAGE_VERSION=$(grep '"version"' apps/cli/package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            
            echo "Tag version: $TAG_VERSION"
            echo "Package version: $PACKAGE_VERSION"
            
            if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
              echo "❌ Version mismatch!"
              echo "Git tag version: $TAG_VERSION"
              echo "package.json version: $PACKAGE_VERSION"
              echo "Please update package.json version to match the tag version."
              exit 1
            fi
            
            echo "✅ Version validation passed: $TAG_VERSION"
          else
            echo "✅ No tag detected, skipping version validation"
          fi

  unit-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run unit tests
        run: |
          chmod +x ./run-tests.sh
          ./run-tests.sh

  compile:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Compile TypeScript
        run: bun run compile

  write-lock-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    env:
      DEBUG_MODE: true # Always run the write lock tests from code without using the built executable.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Install media processing tools
        run: |
          echo "Installing ImageMagick, ffmpeg, and tree via apt..."
          sudo apt update
          sudo apt install -y imagemagick ffmpeg tree

      - name: Build frontend
        working-directory: ./apps/cli
        run: bun run build-fe-linux

      - name: Run write lock smoke tests
        working-directory: ./apps/cli
        run: |
          mkdir -p write-lock-test-logs
          ./write-lock-smoke-test.sh --debug 2>&1 | tee write-lock-test-logs/write-lock-tests-output.log
          WRITE_LOCK_EXIT_CODE=${PIPESTATUS[0]}
          echo "Write lock tests exit code: $WRITE_LOCK_EXIT_CODE"
          echo "Write lock tests exit code: $WRITE_LOCK_EXIT_CODE" >> write-lock-test-logs/write-lock-tests-output.log
          exit $WRITE_LOCK_EXIT_CODE

      - name: Upload write lock test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: write-lock-test-logs-debug
          path: ./apps/cli/write-lock-test-logs/
          retention-days: 7

      - name: Upload write lock test outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: write-lock-test-outputs-debug
          path: ./apps/cli/test/tmp/write-lock-outputs/
          retention-days: 7

  smoke_test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || github.ref_type != 'tag')
    env:
      DEBUG_MODE: true # Always run the smoke tests from code without using the built executable.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Install media processing tools
        run: |
          echo "Installing ImageMagick, ffmpeg, and tree via apt..."
          sudo apt update
          sudo apt install -y imagemagick ffmpeg tree

      - name: Build frontend
        working-directory: ./apps/cli
        run: bun run build-fe-linux

      - name: Run smoke tests
        working-directory: ./apps/cli
        run: |
          mkdir -p smoke-test-logs
          ./smoke-tests.sh all 2>&1 | tee smoke-test-logs/smoke-tests-output.log
          SMOKE_TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE"
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE" >> smoke-test-logs/smoke-tests-output.log
          exit $SMOKE_TEST_EXIT_CODE


      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs-debug
          path: ./apps/cli/smoke-test-logs/
          retention-days: 7

      - name: Upload smoke test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-reports-debug
          path: ./apps/cli/tmp/reports/

      - name: Capture database hash
        working-directory: ./apps/cli
        run: |
          # Capture the root hash from the test database created during smoke tests
          echo "Capturing database root hash for cross-platform validation..."
          
          # Create hash capture directory
          mkdir -p hash-validation
          
          # Get the database root hash from the smoke test database (debug mode uses bun run start)
          if [ -d "./test/tmp/test-db" ]; then
            DB_HASH=$(bun run start -- debug root-hash --db ./test/tmp/test-db --yes 2>/dev/null | tail -1 | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g' | xargs)
            echo "debug:$DB_HASH" > hash-validation/database-hash-debug.txt
            echo "Debug mode database hash: $DB_HASH"
          else
            echo "No test database found, cannot capture hash"
            echo "debug:NO_DATABASE" > hash-validation/database-hash-debug.txt
          fi

      - name: Upload database hash
        uses: actions/upload-artifact@v4
        with:
          name: database-hash-debug
          path: ./apps/cli/hash-validation/database-hash-debug.txt

  build-linux:
    timeout-minutes: 20
    runs-on: ubuntu-24.04
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        run: |
          cd apps/cli
          
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Capture build metadata
        run: |
          cd apps/cli
          
          # Create build metadata file
          echo "export const buildMetadata = {" > src/lib/build-metadata.ts
          echo "  commitHash: \"${{ github.sha }}\"," >> src/lib/build-metadata.ts
          echo "  buildDate: \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> src/lib/build-metadata.ts
          echo "  isNightly: ${{ github.ref_type != 'tag' }}" >> src/lib/build-metadata.ts
          echo "};" >> src/lib/build-metadata.ts
          
          echo "Generated build metadata:"
          cat src/lib/build-metadata.ts

      - name: Verify runner architecture
        run: |
          echo "Architecture: $(uname -m)"
          echo "Processor: $(uname -p)"
          lscpu | grep Architecture

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-


      - name: Install dependencies
        run: bun install

      - name: Install media processing tools
        run: |
          echo "Installing ImageMagick, ffmpeg, and tree via apt..."
          sudo apt update
          sudo apt install -y imagemagick ffmpeg tree
          
      - name: Verify media tool versions
        run: |
          echo "=== Media Tool Versions ==="
          echo ""
          echo "ImageMagick (convert):"
          convert --version | head -1
          echo ""
          echo "ImageMagick (identify):"
          identify --version | head -1
          echo ""
          echo "ffmpeg:"
          ffmpeg -version | head -1
          echo ""
          echo "ffprobe:"
          ffprobe -version | head -1
          echo ""
          
      - name: Build Linux executable
        working-directory: ./apps/cli
        run: |
          bun run build-linux
          chmod +x bin/x64/linux/psi

      - name: Run smoke tests
        working-directory: ./apps/cli
        run: |
          mkdir -p smoke-test-logs
          ./smoke-tests.sh all 2>&1 | tee smoke-test-logs/smoke-tests-output.log
          SMOKE_TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE"
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE" >> smoke-test-logs/smoke-tests-output.log
          exit $SMOKE_TEST_EXIT_CODE


      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs-linux
          path: ./apps/cli/smoke-test-logs/
          retention-days: 7

      - name: Upload smoke test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-reports-linux
          path: ./apps/cli/tmp/reports/

      - name: Capture database hash
        working-directory: ./apps/cli
        run: |
          # Capture the root hash from the test database created during smoke tests
          echo "Capturing database root hash for cross-platform validation..."
          
          # Create hash capture directory
          mkdir -p hash-validation
          
          # Get the database root hash from the smoke test database
          if [ -d "./test/tmp/test-db" ]; then
            DB_HASH=$(./bin/x64/linux/psi debug root-hash --db ./test/tmp/test-db --yes 2>/dev/null | tail -1 | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g' | xargs)
            echo "linux:$DB_HASH" > hash-validation/database-hash-linux.txt
            echo "Linux database hash: $DB_HASH"
          else
            echo "No test database found, cannot capture hash"
            echo "linux:NO_DATABASE" > hash-validation/database-hash-linux.txt
          fi

      - name: Upload database hash
        uses: actions/upload-artifact@v4
        with:
          name: database-hash-linux
          path: ./apps/cli/hash-validation/database-hash-linux.txt

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-linux-x64
          path: ./apps/cli/bin/x64/linux/psi

  build-windows:
    timeout-minutes: 20
    runs-on: windows-latest
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        shell: bash
        run: |
          cd apps/cli
          
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Capture build metadata
        shell: bash
        run: |
          cd apps/cli
          
          # Create build metadata file
          echo "export const buildMetadata = {" > src/lib/build-metadata.ts
          echo "  commitHash: \"${{ github.sha }}\"," >> src/lib/build-metadata.ts
          echo "  buildDate: \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> src/lib/build-metadata.ts
          echo "  isNightly: ${{ github.ref_type != 'tag' }}" >> src/lib/build-metadata.ts
          echo "};" >> src/lib/build-metadata.ts
          
          echo "Generated build metadata:"
          cat src/lib/build-metadata.ts

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Install media processing tools
        run: |
          echo "Installing ImageMagick, ffmpeg, and tree via Chocolatey..."
          choco install imagemagick ffmpeg tree -y

      - name: Verify media tool versions
        run: |
          echo "=== Media Tool Versions ==="
          echo ""
          echo "ImageMagick (magick):"
          magick --version | Select-Object -First 1
          echo ""
          echo "ImageMagick (convert):"
          magick convert --version | Select-Object -First 1
          echo ""
          echo "ffmpeg:"
          ffmpeg -version 2>&1 | Select-Object -First 1
          echo ""
          echo "ffprobe:"
          ffprobe -version 2>&1 | Select-Object -First 1
          echo ""

      - name: Build Windows executable
        working-directory: ./apps/cli
        run: |
          bun run build-win

      - name: Run smoke tests
        working-directory: ./apps/cli
        shell: bash
        run: |
          mkdir -p smoke-test-logs
          ./smoke-tests.sh all 2>&1 | tee smoke-test-logs/smoke-tests-output.log
          SMOKE_TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE"
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE" >> smoke-test-logs/smoke-tests-output.log
          exit $SMOKE_TEST_EXIT_CODE

      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs-windows
          path: ./apps/cli/smoke-test-logs/
          retention-days: 7

      - name: Upload smoke test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-reports-windows
          path: ./apps/cli/tmp/reports/

      - name: Capture database hash
        working-directory: ./apps/cli
        shell: bash
        run: |
          # Capture the root hash from the test database created during smoke tests
          echo "Capturing database root hash for cross-platform validation..."
          
          # Create hash capture directory
          mkdir -p hash-validation
          
          # Get the database root hash from the smoke test database
          if [ -d "./test/tmp/test-db" ]; then
            DB_HASH=$(./bin/x64/win/psi.exe debug root-hash --db ./test/tmp/test-db --yes 2>/dev/null | tail -1 | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g' | xargs)
            echo "windows:$DB_HASH" > hash-validation/database-hash-windows.txt
            echo "Windows database hash: $DB_HASH"
          else
            echo "No test database found, cannot capture hash"
            echo "windows:NO_DATABASE" > hash-validation/database-hash-windows.txt
          fi

      - name: Upload database hash
        uses: actions/upload-artifact@v4
        with:
          name: database-hash-windows
          path: ./apps/cli/hash-validation/database-hash-windows.txt

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-windows-x64
          path: ./apps/cli/bin/x64/win/psi.exe

  build-windows-baseline:
    timeout-minutes: 20
    runs-on: ubuntu-24.04
    needs: [compile, smoke_test, unit-tests]
    if: always() && needs.compile.result == 'success' && needs.smoke_test.result == 'success' && needs.unit-tests.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        shell: bash
        run: |
          cd apps/cli
          
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Capture build metadata
        shell: bash
        run: |
          cd apps/cli
          
          # Create build metadata file
          echo "export const buildMetadata = {" > src/lib/build-metadata.ts
          echo "  commitHash: \"${{ github.sha }}\"," >> src/lib/build-metadata.ts
          echo "  buildDate: \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> src/lib/build-metadata.ts
          echo "  isNightly: ${{ github.ref_type != 'tag' }}" >> src/lib/build-metadata.ts
          echo "};" >> src/lib/build-metadata.ts
          
          echo "Generated build metadata:"
          cat src/lib/build-metadata.ts

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build Windows executable
        working-directory: ./apps/cli
        run: |
          bun run build-win

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-windows-x64-baseline
          path: ./apps/cli/bin/x64/win/psi.exe

  build-macos-x64:
    timeout-minutes: 20
    runs-on: macos-13 # x64 architecture
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        - name: Modify package.json for nightly builds
          if: github.ref_type != 'tag'
          run: |
            cd apps/cli
            
            # Get current version from package.json
            CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
            
            # Generate nightly suffix with current UTC date/time in ISO format
            NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
            NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
            
            echo "Original version: $CURRENT_VERSION"
            echo "Nightly version: $NIGHTLY_VERSION"
            
            # Update package.json with nightly version
            sed -i "" "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
            
            # Verify the change
            echo "Updated package.json version:"
            grep '"version"' package.json

        - name: Capture build metadata
          run: |
            cd apps/cli
            
            # Create build metadata file
            echo "export const buildMetadata = {" > src/lib/build-metadata.ts
            echo "  commitHash: \"${{ github.sha }}\"," >> src/lib/build-metadata.ts
            echo "  buildDate: \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> src/lib/build-metadata.ts
            echo "  isNightly: ${{ github.ref_type != 'tag' }}" >> src/lib/build-metadata.ts
            echo "};" >> src/lib/build-metadata.ts
            
            echo "Generated build metadata:"
            cat src/lib/build-metadata.ts

        - name: Setup Bun
          uses: oven-sh/setup-bun@v2
          with:
            bun-version: 1.2.20

        - name: Cache Bun dependencies
          uses: actions/cache@v4
          with:
            path: |
              ~/.bun/install/cache
              node_modules
              */*/node_modules
            key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
            restore-keys: |
              ${{ runner.os }}-${{ runner.arch }}-bun-

        - name: Verify runner architecture
          run: |
            echo "Architecture: $(uname -m)"
            echo "Processor: $(uname -p)"
            echo "OS Version: $(sw_vers)"

        - name: Install dependencies
          run: bun install

        - name: Install media processing tools
          run: |
            echo "Installing ImageMagick, ffmpeg, and tree via Homebrew..."
            brew install imagemagick ffmpeg tree

        - name: Verify media tool versions
          run: |
            echo "=== Media Tool Versions ==="
            echo ""
            echo "ImageMagick (magick):"
            magick --version | head -1 || echo "magick command not found"
            echo ""
            echo "ImageMagick (convert):"
            convert --version | head -1 || echo "convert command not found"
            echo ""
            echo "ffmpeg:"
            ffmpeg -version | head -1
            echo ""
            echo "ffprobe:"
            ffprobe -version | head -1
            echo ""

        - name: Build macOS executable
          working-directory: ./apps/cli
          run: |
            bun run build-mac-x64
            chmod +x bin/x64/mac/psi

        - name: Run smoke tests
          working-directory: ./apps/cli
          run: |
            mkdir -p smoke-test-logs
            ./smoke-tests.sh all 2>&1 | tee smoke-test-logs/smoke-tests-output.log
            SMOKE_TEST_EXIT_CODE=${PIPESTATUS[0]}
            echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE"
            echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE" >> smoke-test-logs/smoke-tests-output.log
            exit $SMOKE_TEST_EXIT_CODE


        - name: Upload smoke test logs
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: smoke-test-logs-macos-x64
            path: ./apps/cli/smoke-test-logs/
            retention-days: 7

        - name: Upload smoke test reports
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: smoke-test-reports-macos-x64
            path: ./apps/cli/tmp/reports/

        - name: Capture database hash
          working-directory: ./apps/cli
          run: |
            # Capture the root hash from the test database created during smoke tests
            echo "Capturing database root hash for cross-platform validation..."
            
            # Create hash capture directory
            mkdir -p hash-validation
            
            # Get the database root hash from the smoke test database
            if [ -d "./test/tmp/test-db" ]; then
              DB_HASH=$(./bin/x64/mac/psi debug root-hash --db ./test/tmp/test-db --yes 2>/dev/null | tail -1 | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g' | xargs)
              echo "macos-x64:$DB_HASH" > hash-validation/database-hash-macos-x64.txt
              echo "macOS x64 database hash: $DB_HASH"
            else
              echo "No test database found, cannot capture hash"
              echo "macos-x64:NO_DATABASE" > hash-validation/database-hash-macos-x64.txt
            fi

        - name: Upload database hash
          uses: actions/upload-artifact@v4
          with:
            name: database-hash-macos-x64
            path: ./apps/cli/hash-validation/database-hash-macos-x64.txt

        - name: Upload macOS x64 artifact
          uses: actions/upload-artifact@v4
          with:
            name: psi-macos-x64
            path: ./apps/cli/bin/x64/mac/psi

  build-macos-arm64:
    timeout-minutes: 20
    runs-on: macos-latest # ARM64 architecture
    needs: [unit-tests, compile]
    if: always() && needs.unit-tests.result == 'success' && needs.compile.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify package.json for nightly builds
        if: github.ref_type != 'tag'
        run: |
          cd apps/cli
          
          # Get current version from package.json
          CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          
          # Generate nightly suffix with current UTC date/time in ISO format
          NIGHTLY_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")
          NIGHTLY_VERSION="${CURRENT_VERSION}-nightly.${NIGHTLY_TIMESTAMP}"
          
          echo "Original version: $CURRENT_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
          
          # Update package.json with nightly version
          sed -i "" "s/\"version\": *\"[^\"]*\"/\"version\": \"$NIGHTLY_VERSION\"/" package.json
          
          # Verify the change
          echo "Updated package.json version:"
          grep '"version"' package.json

      - name: Capture build metadata
        run: |
          cd apps/cli
          
          # Create build metadata file
          echo "export const buildMetadata = {" > src/lib/build-metadata.ts
          echo "  commitHash: \"${{ github.sha }}\"," >> src/lib/build-metadata.ts
          echo "  buildDate: \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> src/lib/build-metadata.ts
          echo "  isNightly: ${{ github.ref_type != 'tag' }}" >> src/lib/build-metadata.ts
          echo "};" >> src/lib/build-metadata.ts
          
          echo "Generated build metadata:"
          cat src/lib/build-metadata.ts

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.20

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ runner.arch }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-

      - name: Verify runner architecture
        run: |
          echo "Architecture: $(uname -m)"
          echo "Processor: $(uname -p)"
          echo "OS Version: $(sw_vers)"

      - name: Install dependencies
        run: bun install

      - name: Install media processing tools
        run: |
          echo "Installing ImageMagick, ffmpeg, and tree via Homebrew..."
          brew install imagemagick ffmpeg tree

      - name: Verify media tool versions
        run: |
          echo "=== Media Tool Versions ==="
          echo ""
          echo "ImageMagick (magick):"
          magick --version | head -1 || echo "magick command not found"
          echo ""
          echo "ImageMagick (convert):"
          convert --version | head -1 || echo "convert command not found"
          echo ""
          echo "ffmpeg:"
          ffmpeg -version | head -1
          echo ""
          echo "ffprobe:"
          ffprobe -version | head -1
          echo ""

      - name: Build macOS ARM64 executable
        working-directory: ./apps/cli
        run: |
          bun run build-mac-arm64
          chmod +x bin/arm64/mac/psi

      - name: Run smoke tests
        working-directory: ./apps/cli
        run: |
          mkdir -p smoke-test-logs
          ./smoke-tests.sh all 2>&1 | tee smoke-test-logs/smoke-tests-output.log
          SMOKE_TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE"
          echo "Smoke tests exit code: $SMOKE_TEST_EXIT_CODE" >> smoke-test-logs/smoke-tests-output.log
          exit $SMOKE_TEST_EXIT_CODE


      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs-macos-arm64
          path: ./apps/cli/smoke-test-logs/
          retention-days: 7

      - name: Upload smoke test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-reports-macos-arm64
          path: ./apps/cli/tmp/reports/

      - name: Capture database hash
        working-directory: ./apps/cli
        run: |
          # Capture the root hash from the test database created during smoke tests
          echo "Capturing database root hash for cross-platform validation..."
          
          # Create hash capture directory
          mkdir -p hash-validation
          
          # Get the database root hash from the smoke test database
          if [ -d "./test/tmp/test-db" ]; then
            DB_HASH=$(./bin/arm64/mac/psi debug root-hash --db ./test/tmp/test-db --yes 2>/dev/null | tail -1 | tr -d '\n' | sed 's/\x1b\[[0-9;]*m//g' | xargs)
            echo "macos-arm64:$DB_HASH" > hash-validation/database-hash-macos-arm64.txt
            echo "macOS ARM64 database hash: $DB_HASH"
          else
            echo "No test database found, cannot capture hash"
            echo "macos-arm64:NO_DATABASE" > hash-validation/database-hash-macos-arm64.txt
          fi

      - name: Upload database hash
        uses: actions/upload-artifact@v4
        with:
          name: database-hash-macos-arm64
          path: ./apps/cli/hash-validation/database-hash-macos-arm64.txt

      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-macos-arm64
          path: ./apps/cli/bin/arm64/mac/psi

  create-release:
    timeout-minutes: 20
    needs: [build-linux, build-windows, build-macos-x64, build-macos-arm64, smoke_test, write-lock-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-linux-x64
          path: ./artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-windows-x64
          path: ./artifacts/windows

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-windows-x64-baseline
          path: ./artifacts/windows-baseline

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-macos-x64
          path: ./artifacts/macos-x64

      - name: Download macOS ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-macos-arm64
          path: ./artifacts/macos-arm64

      - name: Create compressed archives
        run: |
          cd ./artifacts/linux && chmod +x psi && tar -czf ../psi-linux-x64.tar.gz psi && cd ../..
          cd ./artifacts/windows && zip ../psi-windows-x64.zip psi.exe && cd ../..
          cd ./artifacts/windows-baseline && zip ../psi-windows-x64-baseline.zip psi.exe && cd ../..
          cd ./artifacts/macos-x64 && chmod +x psi && tar -czf ../psi-macos-x64.tar.gz psi && cd ../..
          cd ./artifacts/macos-arm64 && chmod +x psi && tar -czf ../psi-macos-arm64.tar.gz psi && cd ../..

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the latest non-nightly tag (excluding current tag if this is a tagged build)
          if [ "${{ github.ref_type }}" == "tag" ]; then
            # For tagged releases, get commits since the previous tag (excluding current and nightly tags)
            PREVIOUS_TAG=$(git tag --list --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | grep -v "^nightly$" | head -1)
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "Generating release notes for tagged release since previous tag: $PREVIOUS_TAG"
              COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
            else
              echo "No previous tag found, using all commits for tagged release"
              COMMIT_RANGE=""
            fi
          else
            # For nightly builds, get commits since the last non-nightly tag
            LAST_TAG=$(git tag --list --sort=-version:refname | grep -v "^nightly$" | head -1)
            if [ -n "$LAST_TAG" ]; then
              echo "Generating release notes for nightly build since last tag: $LAST_TAG"
              COMMIT_RANGE="${LAST_TAG}..HEAD"
            else
              echo "No previous tag found, using all commits for nightly build"
              COMMIT_RANGE=""
            fi
          fi
          
          # Get commits that start with "cli:" and process them
          if [ -n "$COMMIT_RANGE" ]; then
            RAW_COMMITS=$(git log --oneline --no-merges "$COMMIT_RANGE" --format="%s" --grep="^cli:")
          else
            RAW_COMMITS=$(git log --oneline --no-merges --format="%s" --grep="^cli:")
          fi
          
          # Process commits: filter for "cli:" prefix, remove prefix, trim whitespace, and format as bullet points
          RELEASE_NOTES=""
          if [ -n "$RAW_COMMITS" ]; then
            RELEASE_NOTES=$(echo "$RAW_COMMITS" | while IFS= read -r commit; do
              if [[ $commit == cli:* ]]; then
                # Remove "cli:" prefix and trim leading/trailing whitespace
                cleaned=$(echo "${commit#cli:}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                if [ -n "$cleaned" ]; then
                  echo "- $cleaned"
                fi
              fi
            done)
          fi
          
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="- No CLI-related commits found"
          fi
          
          # Save release notes to output and file
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Generated release notes:"
          echo "$RELEASE_NOTES"

      - name: Delete existing nightly release
        if: github.ref_type != 'tag'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete nightly --yes --cleanup-tag || true
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'nightly' }}
          name: ${{ github.ref_type == 'tag' && format('Photosphere CLI {0}', github.ref_name) || 'Photosphere CLI Nightly' }}
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          files: |
            ./artifacts/psi-linux-x64.tar.gz
            ./artifacts/psi-windows-x64.zip
            ./artifacts/psi-windows-x64-baseline.zip
            ./artifacts/psi-macos-x64.tar.gz
            ./artifacts/psi-macos-arm64.tar.gz
          body: |
            ${{ github.ref_type == 'tag' && format('Photosphere CLI release {0}', github.ref_name) || format('Photosphere CLI nightly build - {0}', github.sha) }}
            
            ${{ github.ref_type != 'tag' && '⚠️ **This is a nightly build and may be unstable**' || '' }}
            ${{ github.ref_type != 'tag' && format('Built from commit: {0}', github.sha) || '' }}
            
            ## What's Changed
            ${{ steps.release-notes.outputs.RELEASE_NOTES }}
            
            ## Download
            - **Linux**: `psi-linux-x64.tar.gz`
            - **Windows modern**: `psi-windows-x64.zip` (for modern processors, try this one first)
            - **Windows baseline**: `psi-windows-x64-baseline.zip` (for older processors, try this one next)
            - **macOS (Intel)**: `psi-macos-x64.tar.gz`
            - **macOS (Apple Silicon)**: `psi-macos-arm64.tar.gz`
            
            ## Installation
            1. Download the appropriate file for your platform
            2. Extract the archive
            3. Make the binary executable (Linux/macOS): `chmod +x psi`
            4. Move to your PATH or run directly