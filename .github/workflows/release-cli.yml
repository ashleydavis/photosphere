name: Release CLI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify runner architecture
        run: |
          echo "Architecture: $(uname -m)"
          echo "Processor: $(uname -p)"
          lscpu | grep Architecture

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run smoke tests
        working-directory: ./apps/cli
        run: ./smoke-tests.sh all
          
      - name: Build Linux executable
        working-directory: ./apps/cli
        run: |
          bun run build-linux
          chmod +x bin/x64/linux/psi

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-linux-x64
          path: ./apps/cli/bin/x64/linux/psi

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run smoke tests (Windows)
        working-directory: ./apps/cli
        shell: bash
        run: ./smoke-tests.sh all
          
      - name: Build frontend
        working-directory: ./apps/frontend
        run: |
          $env:VITE_BASE_URL = ""
          bun run build

      - name: Create frontend zip
        working-directory: ./apps/frontend
        run: |
          Compress-Archive -Path dist -DestinationPath pfe.zip -Force
          Copy-Item pfe.zip ../cli/pfe.zip -Force

      - name: Build Windows executable
        working-directory: ./apps/cli
        run: bun build --compile --minify --sourcemap --target=bun-windows-x64 --outfile bin/x64/win/psi.exe ./src/index.ts

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-windows-x64
          path: ./apps/cli/bin/x64/win/psi.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run smoke tests (macOS)
        working-directory: ./apps/cli
        run: ./smoke-tests.sh all

      - name: Build macOS executable
        working-directory: ./apps/cli
        run: |
          bun run build-mac
          chmod +x bin/x64/mac/psi

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: psi-macos-x64
          path: ./apps/cli/bin/x64/mac/psi

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-linux-x64
          path: ./artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-windows-x64
          path: ./artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: psi-macos-x64
          path: ./artifacts/macos

      - name: Create compressed archives
        run: |
          cd ./artifacts/linux && chmod +x psi && tar -czf ../psi-linux-x64.tar.gz psi && cd ../..
          cd ./artifacts/windows && zip ../psi-windows-x64.zip psi.exe && cd ../..
          cd ./artifacts/macos && chmod +x psi && tar -czf ../psi-macos-x64.tar.gz psi && cd ../..

      - name: Delete existing nightly release
        if: github.ref_type != 'tag'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete nightly --yes --cleanup-tag || true
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'nightly' }}
          name: ${{ github.ref_type == 'tag' && format('Photosphere CLI {0}', github.ref_name) || 'Photosphere CLI Nightly' }}
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          files: |
            ./artifacts/psi-linux-x64.tar.gz
            ./artifacts/psi-windows-x64.zip
            ./artifacts/psi-macos-x64.tar.gz
          body: |
            ${{ github.ref_type == 'tag' && format('Photosphere CLI release {0}', github.ref_name) || format('Photosphere CLI nightly build - {0}', github.sha) }}
            
            ${{ github.ref_type != 'tag' && '⚠️ **This is a nightly build and may be unstable**' || '' }}
            ${{ github.ref_type != 'tag' && format('Built from commit: {0}', github.sha) || '' }}
            
            ## Download
            - **Linux**: `psi-linux-x64.tar.gz`
            - **Windows**: `psi-windows-x64.zip`
            - **macOS**: `psi-macos-x64.tar.gz`
            
            ## Installation
            1. Download the appropriate file for your platform
            2. Extract the archive
            3. Make the binary executable (Linux/macOS): `chmod +x psi`
            4. Move to your PATH or run directly